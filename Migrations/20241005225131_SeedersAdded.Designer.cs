// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TechStore.Data;

#nullable disable

namespace TechStore.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241005225131_SeedersAdded")]
    partial class SeedersAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("TechStore.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "powerful desktop computers designed for both home and professional use. From basic models to advanced workstations for intensive tasks, find the right fit for your needs.",
                            Name = "desktop"
                        },
                        new
                        {
                            Id = 2,
                            Description = "discover the latest smartphones with cutting-edge technology. From flagship models to budget-friendly options, we offer devices for every lifestyle",
                            Name = "mobile"
                        },
                        new
                        {
                            Id = 3,
                            Description = "essential tech accessories, including chargers, cases, keyboards, headphones, and more to enhance your experience",
                            Name = "accesories"
                        },
                        new
                        {
                            Id = 4,
                            Description = "software solutions for all your needs, from operating systems and office suites to design, development, and digital security tools.",
                            Name = "software"
                        });
                });

            modelBuilder.Entity("TechStore.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("createdAt");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("TechStore.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("price");

                    b.Property<int>("Stock")
                        .HasColumnType("int")
                        .HasColumnName("stock");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "powerful desktop for gaming with the latest hardware.",
                            Name = "gaming desktop",
                            Price = 1500.00m,
                            Stock = 30
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Description = "desktop optimized for high-performance tasks like video editing.",
                            Name = "workstation desktop",
                            Price = 1800.00m,
                            Stock = 15
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Description = "compact desktop for home or office use.",
                            Name = "compact desktop",
                            Price = 600.00m,
                            Stock = 60
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            Description = "all-in-one desktop with a sleek design, perfect for space-saving.",
                            Name = "all-in-one desktop",
                            Price = 1200.00m,
                            Stock = 40
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            Description = "affordable desktop ideal for basic tasks and everyday use.",
                            Name = "budget desktop",
                            Price = 400.00m,
                            Stock = 100
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            Description = "high-end smartphone with the latest technology and camera.",
                            Name = "flagship smartphone",
                            Price = 1000.00m,
                            Stock = 50
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            Description = "affordable smartphone with all the essential features.",
                            Name = "budget smartphone",
                            Price = 200.00m,
                            Stock = 150
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 2,
                            Description = "smartphone offering a great balance of performance and price.",
                            Name = "mid-range smartphone",
                            Price = 500.00m,
                            Stock = 100
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 2,
                            Description = "smartphone built for mobile gaming with enhanced graphics.",
                            Name = "gaming smartphone",
                            Price = 800.00m,
                            Stock = 40
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 2,
                            Description = "durable smartphone designed for tough environments.",
                            Name = "rugged smartphone",
                            Price = 600.00m,
                            Stock = 70
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 3,
                            Description = "ergonomic wireless mouse with long battery life.",
                            Name = "wireless mouse",
                            Price = 25.00m,
                            Stock = 200
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 3,
                            Description = "high-quality mechanical keyboard for precision typing.",
                            Name = "mechanical keyboard",
                            Price = 100.00m,
                            Stock = 150
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 3,
                            Description = "smartwatch with fitness tracking and notification features.",
                            Name = "smartwatch",
                            Price = 150.00m,
                            Stock = 80
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 3,
                            Description = "compact wireless earbuds with noise-cancelling technology.",
                            Name = "wireless earbuds",
                            Price = 75.00m,
                            Stock = 250
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 3,
                            Description = "multi-port usb-c hub for enhanced connectivity.",
                            Name = "usb-c hub",
                            Price = 50.00m,
                            Stock = 180
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 4,
                            Description = "comprehensive antivirus software for real-time protection.",
                            Name = "antivirus software",
                            Price = 40.00m,
                            Stock = 300
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 4,
                            Description = "complete office suite including word processing and spreadsheets.",
                            Name = "office suite",
                            Price = 120.00m,
                            Stock = 150
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 4,
                            Description = "professional-grade photo editing software with advanced tools.",
                            Name = "photo editing software",
                            Price = 200.00m,
                            Stock = 80
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 4,
                            Description = "easy-to-use accounting software for small businesses.",
                            Name = "accounting software",
                            Price = 100.00m,
                            Stock = 100
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 4,
                            Description = "powerful project management tool for teams and individuals.",
                            Name = "project management software",
                            Price = 150.00m,
                            Stock = 90
                        });
                });

            modelBuilder.Entity("TechStore.Models.ProductOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("product_orders");
                });

            modelBuilder.Entity("TechStore.Models.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "employee"
                        },
                        new
                        {
                            Id = 3,
                            Name = "client"
                        });
                });

            modelBuilder.Entity("TechStore.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("address");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("password");

                    b.Property<int>("RolId")
                        .HasColumnType("int")
                        .HasColumnName("rol_id");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("telephone");

                    b.HasKey("Id");

                    b.HasIndex("RolId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("TechStore.Models.Order", b =>
                {
                    b.HasOne("TechStore.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TechStore.Models.Product", b =>
                {
                    b.HasOne("TechStore.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("TechStore.Models.ProductOrder", b =>
                {
                    b.HasOne("TechStore.Models.Order", "Order")
                        .WithMany("ProductOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TechStore.Models.Product", "Product")
                        .WithMany("ProductOrders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("TechStore.Models.User", b =>
                {
                    b.HasOne("TechStore.Models.Rol", "Rol")
                        .WithMany("Users")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("TechStore.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("TechStore.Models.Order", b =>
                {
                    b.Navigation("ProductOrders");
                });

            modelBuilder.Entity("TechStore.Models.Product", b =>
                {
                    b.Navigation("ProductOrders");
                });

            modelBuilder.Entity("TechStore.Models.Rol", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("TechStore.Models.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
